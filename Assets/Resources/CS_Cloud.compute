
#pragma kernel CS_DrawSmoke

#include "UnityCG.cginc"
#include "HL_Utility.hlsl"
#include "HL_Noise.hlsl"

RWTexture2D<float4> _CloudColRT,_CloudMaskRT,_CloudDepthRT,_CloudAlphaRT;
Texture2D<float> _DepthTextureRT;
SamplerState sampler_DepthTextureRT;
float _ScreenWidth,_ScreenHeight;
float4x4 _CamInvProjection, _CamToWorld , _Unity_VP, _Unity_V;
float3 _CamPosWS;
float3 _LightDirection;

float _BlendFactor;
float3 _CloudColor,_LightColor;

float _CloudAbsorbance, _LightIntensity, _CloudDensity;
float _EyeSampleStepSize = 0.2;
float _LightStepSize = 0.2;
int _LightSampleCount = 5;


struct Sphere
{
    float3 center;
    float radius;
};
StructuredBuffer<Sphere> _SphereBuffer;
int _SphereCount;

static const float maxDist = 20;
static const float epsilon = 0.001;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 _origin, float3 _direction)
{
    Ray ray;
    ray.origin = _origin;
    ray.direction = _direction;
    return ray;
}
Ray ComputeCameraRay (float2 uv)
{
    
    float3 direction = mul (_CamInvProjection,float4 (uv,0,1)).xyz;
    direction = mul (_CamToWorld,float4 (direction,0)).xyz;
    direction = normalize(direction);
    return  CreateRay(_CamPosWS,direction);
}

struct SceneInfo
{
    float3 position;
    float3 normal;
    float rayDepth;
    int marchStep;
    float alpha;
    float3 lightCol;
};

SceneInfo CreateSceneInfo(float3 position, float3 normal, float rayDepth, int marchStep, float alpha,float3 lightCol)
{
    SceneInfo sceneInfo;
    sceneInfo.position = position;
    sceneInfo.normal = normal;
    sceneInfo.rayDepth = rayDepth;
    sceneInfo.marchStep = marchStep;
    sceneInfo.alpha = alpha;
    sceneInfo.lightCol = lightCol;
    return sceneInfo;
}

//struct HitInfo 
//{
//    float3 hit0;
//    float3 hit1;
//    float3 hit;
//    float hit0dist;
//    float hit1dist;
//    float3 hit0normal,hit1normal,normal;
//};
//
//
//HitInfo SphereTrace( Ray ray, float3 so,float r) 
//{
//    HitInfo hit = (HitInfo)0;
//    float3 hit0 = 0;
//    float3 hit1 = 0;
//    float hit0dist = 0;
//    float hit1dist = 0;
//
//    float3 ro = ray.origin;
//    float3 d = ray.direction;
//    
//    float3 rs = normalize(so - ro);
//    float rToS = length(so - ro);
//    float rToC = max(0,dot(rs, d)) * rToS;
//    
//       
//    float3 c = ro + d * rToC;
//    float sToC =  dot(-rs, so - c ) * rToS;
//    if (sToC > r )
//        return hit;
//    
//    float hit0ToC = sqrt(pow(r, 2)- pow(sToC, 2));
//
//    
//    hit0 = c - d * hit0ToC;
//    hit1 = c + d * hit0ToC;
//
//    hit0dist = length(hit0 - ro);
//    hit1dist = length(hit1 - ro);
//
//    hit.hit0 = hit0;
//    hit.hit1 = hit1;
//    hit.hit0dist = hit0dist;
//    hit.hit1dist = hit1dist;
//    hit.hit0normal= normalize(hit0 - so);
//    hit.hit1normal = normalize(hit1 - so);
//
//    hit.normal = rToS < r ? hit. hit1normal : hit. hit0normal;
//
//    hit.hit = rToS < r ? hit1 : hit0;
//
//    return hit;
//}
//
//HitInfo SpheresTrace(Ray ray)
//{
//    HitInfo bestHit = (HitInfo)0;
//    bestHit.hit0dist = 1.#INF;
//
//    for (int i = 0; i < _SphereCount; i++)
//    {
//        Sphere sphere = _SphereBuffer[i];
//        HitInfo hitInfo = SphereTrace(ray, sphere.center, sphere.radius);
//        if (hitInfo.hit0dist < bestHit.hit0dist) 
//        {
//            bestHit = hitInfo;
//        }
//    }
//    return bestHit;
//}


float Spheres (float3 pos)
{
    float globalDist = maxDist;
    
    for (int i = 0; i<_SphereCount; i ++)
    {
        const float localDist = distance(pos,_SphereBuffer[i].center) - _SphereBuffer[i].radius;
        globalDist = Blend(localDist,globalDist,_BlendFactor) ;
    }
    return globalDist;
}
float SDF (float3 pos)
{
    return  Spheres(pos);
}
float3 GetNormal(float3 pos)
{
    float2 e = float2(0,0.001);
    float x = SDF(pos + e.yxx);
    float y = SDF(pos + e.xyx);
    float z = SDF(pos + e.xxy);
    return normalize( float3 (x,y,z) - SDF(pos));
}
float RemapDensity( float3 position) 
{
    float distToCent = 100;
    for (int j = 0; j < _SphereCount; j++)
    {
        distToCent = min(distToCent, distance(position, _SphereBuffer[j].center));
    }
    return  smoothstep(1.5, 0,  distToCent);
}

float SampleDensity(float3 position) 
{
    float density = fbm(position *2 ) * 0.3;
    density += (fbm(position * 5)-0.2)*0.05;

    //density = ace_worley(position,10);
    return density ;
}

float LightMarch(float3 position) 
{
    float totalDensity = 0;
    for (int i = 0; i < _LightSampleCount; i++) 
    {
        const float stepSize = _LightStepSize;
        
        position += -_LightDirection * stepSize;
        
        if (SDF(position) < 0)
            totalDensity += SampleDensity(position) * RemapDensity(position) * stepSize;
        else 
            totalDensity += 0;
    }
    return exp(-totalDensity *_CloudAbsorbance);
}

void CalculateLighting(float step, float3 pos, inout float density, inout float transmittance, inout float lightEnergy)
{
    density += max(0,step * RemapDensity(pos) * SampleDensity(pos)) ;
    transmittance *= exp(-density * _CloudDensity * step);
    lightEnergy += LightMarch(pos) * density * transmittance * _LightIntensity * step;
} 

SceneInfo RenderSceneInfo(float3 o, float3 d, float geoDepth)
{
    float3 throughPos = 0, hitPos = 0;
    float hitDist = 0;
    float snappingOffset = 0;
    float density = 0;
    float transmittance = 1;
    float lightEnergy = 0;
    int marchStep = 0;
    int insideObject = -1, initialState = 0;

    const float stepSize = _EyeSampleStepSize;
    const float pf = dot(d, -_Unity_V[2].xyz);

    while ( hitDist < maxDist)
    {
        marchStep ++;
        throughPos = o + d * hitDist;
        const float distToObject =SDF(throughPos);
        const float marchDist = distToObject <= epsilon ? stepSize : distToObject ;

        if (distToObject <= epsilon)
        {
            hitPos = throughPos;
            if (insideObject < 0)
                insideObject *= -1;

            CalculateLighting(stepSize, throughPos, density, transmittance, lightEnergy);

            if (hitDist * pf + stepSize > geoDepth)
            {
                snappingOffset = geoDepth - hitDist * pf;
                break;
            }
        }
        else
            if (insideObject > 0)
                insideObject *= -1;

        if (initialState != insideObject && distToObject >epsilon)
        {
            const float3 posBeforeExit = throughPos - d * stepSize;
            float exitLength = -SDF(posBeforeExit);
            const float bias = saturate(dot(d, GetNormal(posBeforeExit)));
            exitLength /= bias+0.02;
            const float3 boundaryPos = posBeforeExit + d * exitLength;
            CalculateLighting(exitLength, boundaryPos, density, transmittance, lightEnergy);
        }
        if (transmittance <= 0.01)
            break;
        if (hitDist * pf + stepSize > geoDepth)
            break;
       
        hitDist +=  marchDist;
        initialState = insideObject;
    }
    
    throughPos += snappingOffset * d;
    CalculateLighting(snappingOffset, throughPos, density, transmittance, lightEnergy);
    const float3 col = lerp(_CloudColor, _LightColor, lightEnergy);
    return CreateSceneInfo(hitPos, -GetNormal(hitPos), SDF(_CamPosWS) > 0 ? hitDist : -hitDist + 0.001, marchStep, 1 - transmittance, col);
}


[numthreads(8,8,1)]
void CS_DrawSmoke(uint3 id : SV_DispatchThreadID)
{
    float2 uv = float2 (id.x / (_ScreenWidth - 1), id.y /(_ScreenHeight - 1));
    const float geometryDepthNDC = _DepthTextureRT.SampleLevel(sampler_DepthTextureRT, uv, 0);
    const float geometryDepthVS = LinearEyeDepth(geometryDepthNDC);
    const Ray camRay = ComputeCameraRay(uv * 2 -1);
    const SceneInfo sceneInfo = RenderSceneInfo(camRay.origin,camRay.direction, geometryDepthVS);

    const float sceneAlpha = sceneInfo.alpha;
    float3 col = sceneInfo.lightCol;

    //HitInfo hit = SpheresTrace(camRay);
    //_CloudColRT[id.xy] =  float4 (hit.normal,0.8);
    _CloudColRT[id.xy] =  float4 (col,sceneAlpha);
   // _CloudColRT[id.xy] = float4 (sceneInfo.marchStep * 0.01.xxx,1);
}
